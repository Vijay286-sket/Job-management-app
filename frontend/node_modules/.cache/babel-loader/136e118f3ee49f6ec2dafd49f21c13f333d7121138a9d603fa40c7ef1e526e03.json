{"ast":null,"code":"import api from './authService';\nexport const jobService = {\n  // Create new job (Recruiters only)\n  createJob: async jobData => {\n    try {\n      const response = await api.post('/jobs', jobData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get all jobs with filtering and pagination\n  getJobs: async (filters = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n\n      // Add filters to query params\n      Object.keys(filters).forEach(key => {\n        if (filters[key] !== undefined && filters[key] !== null && filters[key] !== '') {\n          queryParams.append(key, filters[key]);\n        }\n      });\n      const response = await api.get(`/jobs?${queryParams.toString()}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get single job by ID\n  getJobById: async jobId => {\n    try {\n      const response = await api.get(`/jobs/${jobId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get jobs posted by current recruiter\n  getMyJobs: async (filters = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key] !== undefined && filters[key] !== null && filters[key] !== '') {\n          queryParams.append(key, filters[key]);\n        }\n      });\n      const response = await api.get(`/jobs/my/jobs?${queryParams.toString()}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get job statistics for recruiter dashboard\n  getJobStats: async () => {\n    try {\n      const response = await api.get('/jobs/my/stats');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Update job (Recruiters only - own jobs)\n  updateJob: async (jobId, jobData) => {\n    try {\n      const response = await api.put(`/jobs/${jobId}`, jobData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Delete job (Recruiters only - own jobs)\n  deleteJob: async jobId => {\n    try {\n      const response = await api.delete(`/jobs/${jobId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Search jobs with text query\n  searchJobs: async (searchQuery, filters = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n      if (searchQuery) {\n        queryParams.append('search', searchQuery);\n      }\n      Object.keys(filters).forEach(key => {\n        if (filters[key] !== undefined && filters[key] !== null && filters[key] !== '') {\n          queryParams.append(key, filters[key]);\n        }\n      });\n      const response = await api.get(`/jobs?${queryParams.toString()}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get job options for form dropdowns\n  getJobOptions: () => {\n    return {\n      jobTypes: [{\n        value: 'full-time',\n        label: 'Full Time'\n      }, {\n        value: 'part-time',\n        label: 'Part Time'\n      }, {\n        value: 'contract',\n        label: 'Contract'\n      }, {\n        value: 'freelance',\n        label: 'Freelance'\n      }, {\n        value: 'internship',\n        label: 'Internship'\n      }],\n      experienceLevels: [{\n        value: 'entry',\n        label: 'Entry Level'\n      }, {\n        value: 'mid',\n        label: 'Mid Level'\n      }, {\n        value: 'senior',\n        label: 'Senior Level'\n      }, {\n        value: 'executive',\n        label: 'Executive'\n      }],\n      currencies: [{\n        value: 'USD',\n        label: 'USD ($)'\n      }, {\n        value: 'EUR',\n        label: 'EUR (€)'\n      }, {\n        value: 'GBP',\n        label: 'GBP (£)'\n      }, {\n        value: 'INR',\n        label: 'INR (₹)'\n      }, {\n        value: 'CAD',\n        label: 'CAD (C$)'\n      }, {\n        value: 'AUD',\n        label: 'AUD (A$)'\n      }],\n      statuses: [{\n        value: 'active',\n        label: 'Active'\n      }, {\n        value: 'paused',\n        label: 'Paused'\n      }, {\n        value: 'closed',\n        label: 'Closed'\n      }, {\n        value: 'draft',\n        label: 'Draft'\n      }]\n    };\n  }\n};\nexport default jobService;","map":{"version":3,"names":["api","jobService","createJob","jobData","response","post","data","error","getJobs","filters","queryParams","URLSearchParams","Object","keys","forEach","key","undefined","append","get","toString","getJobById","jobId","getMyJobs","getJobStats","updateJob","put","deleteJob","delete","searchJobs","searchQuery","getJobOptions","jobTypes","value","label","experienceLevels","currencies","statuses"],"sources":["C:/Users/hp/OneDrive/Documents/web project/frontend/src/services/jobService.js"],"sourcesContent":["import api from './authService';\n\nexport const jobService = {\n  // Create new job (Recruiters only)\n  createJob: async (jobData) => {\n    try {\n      const response = await api.post('/jobs', jobData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Get all jobs with filtering and pagination\n  getJobs: async (filters = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      // Add filters to query params\n      Object.keys(filters).forEach(key => {\n        if (filters[key] !== undefined && filters[key] !== null && filters[key] !== '') {\n          queryParams.append(key, filters[key]);\n        }\n      });\n\n      const response = await api.get(`/jobs?${queryParams.toString()}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Get single job by ID\n  getJobById: async (jobId) => {\n    try {\n      const response = await api.get(`/jobs/${jobId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Get jobs posted by current recruiter\n  getMyJobs: async (filters = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      Object.keys(filters).forEach(key => {\n        if (filters[key] !== undefined && filters[key] !== null && filters[key] !== '') {\n          queryParams.append(key, filters[key]);\n        }\n      });\n\n      const response = await api.get(`/jobs/my/jobs?${queryParams.toString()}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Get job statistics for recruiter dashboard\n  getJobStats: async () => {\n    try {\n      const response = await api.get('/jobs/my/stats');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Update job (Recruiters only - own jobs)\n  updateJob: async (jobId, jobData) => {\n    try {\n      const response = await api.put(`/jobs/${jobId}`, jobData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Delete job (Recruiters only - own jobs)\n  deleteJob: async (jobId) => {\n    try {\n      const response = await api.delete(`/jobs/${jobId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Search jobs with text query\n  searchJobs: async (searchQuery, filters = {}) => {\n    try {\n      const queryParams = new URLSearchParams();\n      \n      if (searchQuery) {\n        queryParams.append('search', searchQuery);\n      }\n\n      Object.keys(filters).forEach(key => {\n        if (filters[key] !== undefined && filters[key] !== null && filters[key] !== '') {\n          queryParams.append(key, filters[key]);\n        }\n      });\n\n      const response = await api.get(`/jobs?${queryParams.toString()}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Get job options for form dropdowns\n  getJobOptions: () => {\n    return {\n      jobTypes: [\n        { value: 'full-time', label: 'Full Time' },\n        { value: 'part-time', label: 'Part Time' },\n        { value: 'contract', label: 'Contract' },\n        { value: 'freelance', label: 'Freelance' },\n        { value: 'internship', label: 'Internship' }\n      ],\n      experienceLevels: [\n        { value: 'entry', label: 'Entry Level' },\n        { value: 'mid', label: 'Mid Level' },\n        { value: 'senior', label: 'Senior Level' },\n        { value: 'executive', label: 'Executive' }\n      ],\n      currencies: [\n        { value: 'USD', label: 'USD ($)' },\n        { value: 'EUR', label: 'EUR (€)' },\n        { value: 'GBP', label: 'GBP (£)' },\n        { value: 'INR', label: 'INR (₹)' },\n        { value: 'CAD', label: 'CAD (C$)' },\n        { value: 'AUD', label: 'AUD (A$)' }\n      ],\n      statuses: [\n        { value: 'active', label: 'Active' },\n        { value: 'paused', label: 'Paused' },\n        { value: 'closed', label: 'Closed' },\n        { value: 'draft', label: 'Draft' }\n      ]\n    };\n  }\n};\n\nexport default jobService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}